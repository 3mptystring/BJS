// This file is automatically generated by meteor-jsdoc. Regenerate it with 'meteor-jsdoc build'
DocsData = {
    "Account": {
        "filename": "account.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/account.js",
        "kind": "class",
        "lineno": 12,
        "longname": "Account",
        "name": "Account",
        "params": [
            {
                "name": "score_write_permissions",
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                }
            },
            {
                "name": "group_permissions",
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                }
            },
            {
                "name": "ac",
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "scope": "global",
        "summary": "Object containing information about a specific account"
    },
    "Athlete": {
        "filename": "athlete.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/athlete.js",
        "kind": "class",
        "lineno": 22,
        "longname": "Athlete",
        "name": "Athlete",
        "params": [
            {
                "name": "log"
            },
            {
                "name": "firstName"
            },
            {
                "name": "lastName"
            },
            {
                "name": "ageGroup"
            },
            {
                "name": "isMale"
            },
            {
                "name": "group"
            },
            {
                "name": "handicap"
            },
            {
                "name": "maxAge"
            },
            {
                "name": "ct"
            }
        ],
        "scope": "global",
        "summary": "Creates a new Athlete with the given information."
    },
    "Athlete#age": {
        "comment": "/**\n     * @summary Sets the age of the athlete.\n     * @param newAge\n     */",
        "filename": "athlete.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/athlete.js",
        "kind": "member",
        "lineno": 154,
        "longname": "Athlete#age",
        "memberof": "Athlete",
        "name": "age",
        "params": [
            {
                "name": "newAge"
            }
        ],
        "scope": "instance",
        "summary": "Sets the age of the athlete."
    },
    "Athlete#check": {
        "filename": "athlete.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/athlete.js",
        "kind": "function",
        "lineno": 98,
        "longname": "Athlete#check",
        "memberof": "Athlete",
        "name": "check",
        "params": [],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "scope": "instance",
        "summary": "Checks whether the properties of the athlete are correct."
    },
    "Athlete#encryptForDatabase": {
        "filename": "athlete.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/athlete.js",
        "kind": "function",
        "lineno": 164,
        "longname": "Athlete#encryptForDatabase",
        "memberof": "Athlete",
        "name": "encryptForDatabase",
        "params": [
            {
                "name": "groupAccount"
            },
            {
                "name": "serverAccount"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "scope": "instance",
        "summary": "Encrypts the athlete for the database"
    },
    "Athlete#getFullName": {
        "filename": "athlete.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/athlete.js",
        "kind": "function",
        "lineno": 126,
        "longname": "Athlete#getFullName",
        "memberof": "Athlete",
        "name": "getFullName",
        "params": [],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "scope": "instance",
        "summary": "Returns the full name (first name & last name) of the athlete."
    },
    "Athlete#getPlain": {
        "filename": "athlete.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/athlete.js",
        "kind": "function",
        "lineno": 57,
        "longname": "Athlete#getPlain",
        "memberof": "Athlete",
        "name": "getPlain",
        "params": [
            {
                "name": "log"
            },
            {
                "name": "accounts",
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                }
            },
            {
                "name": "requireSignature"
            }
        ],
        "returns": [
            {}
        ],
        "scope": "instance",
        "summary": "Returns the data in plain text."
    },
    "Athlete#getShortName": {
        "filename": "athlete.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/athlete.js",
        "kind": "function",
        "lineno": 133,
        "longname": "Athlete#getShortName",
        "memberof": "Athlete",
        "name": "getShortName",
        "params": [],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "scope": "instance",
        "summary": "Returns a short version of the athletes name (first name & last initial)."
    },
    "Athlete#tableAge": {
        "comment": "/**\n     * @summary Returns the age of the athlete. This might not be the correct age but for the BJS only the year of birth is important. If the age is greater than 20, 20 is returned.\n     * @returns {number}\n     */",
        "filename": "athlete.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/athlete.js",
        "kind": "member",
        "lineno": 147,
        "longname": "Athlete#tableAge",
        "memberof": "Athlete",
        "name": "tableAge",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "scope": "instance",
        "summary": "Returns the age of the athlete. This might not be the correct age but for the BJS only the year of birth is important. If the age is greater than 20, 20 is returned."
    },
    "Athlete#update": {
        "filename": "athlete.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/athlete.js",
        "kind": "function",
        "lineno": 71,
        "longname": "Athlete#update",
        "memberof": "Athlete",
        "name": "update",
        "params": [
            {
                "name": "log"
            },
            {
                "description": "<p>the sport type of the data</p>",
                "name": "stID",
                "type": {
                    "names": [
                        "string"
                    ]
                }
            },
            {
                "description": "<p>the new data</p>",
                "name": "newMeasurements",
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                }
            },
            {
                "name": "groupAccount"
            },
            {
                "name": "stationAccount"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "scope": "instance",
        "summary": "Updates the data of a given stID."
    },
    "Athlete.decryptFromDatabase": {
        "filename": "athlete.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/athlete.js",
        "kind": "function",
        "lineno": 190,
        "longname": "Athlete.decryptFromDatabase",
        "memberof": "Athlete",
        "name": "decryptFromDatabase",
        "params": [
            {
                "name": "log"
            },
            {
                "name": "data"
            },
            {
                "name": "accounts"
            },
            {
                "name": "require_signature"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "scope": "static",
        "summary": "Decrypts the data from the database"
    },
    "Athletics.calculate": {
        "filename": "athletics.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/competition_types/athletics.js",
        "kind": "function",
        "lineno": 179,
        "longname": "Athletics.calculate",
        "memberof": "Athletics",
        "name": "calculate",
        "params": [
            {
                "name": "log"
            },
            {
                "name": "athlete"
            },
            {
                "description": "<p>auth. codes</p>",
                "name": "accounts",
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                }
            },
            {
                "name": "requireSignature"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "scope": "static",
        "summary": "Calculates the score archived by a athlete. In case of incomplete data, the function will calculate as much as possible."
    },
    "Athletics.calculateOne": {
        "filename": "athletics.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/competition_types/athletics.js",
        "kind": "function",
        "lineno": 136,
        "longname": "Athletics.calculateOne",
        "memberof": "Athletics",
        "name": "calculateOne",
        "params": [
            {
                "name": "dataObject"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                }
            }
        ],
        "scope": "static",
        "summary": "Calculates the score of one dataObject returned by the getValidData function."
    },
    "Athletics.canDoSportType": {
        "filename": "athletics.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/competition_types/athletics.js",
        "kind": "function",
        "lineno": 25,
        "longname": "Athletics.canDoSportType",
        "memberof": "Athletics",
        "name": "canDoSportType",
        "params": [
            {
                "name": "log"
            },
            {
                "name": "athlete"
            },
            {
                "name": "stID",
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                }
            }
        ],
        "scope": "static",
        "summary": "Returns whether a given athlete can do the sport type with the id stID."
    },
    "Athletics.getCertificateInfo": {
        "filename": "athletics.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/competition_types/athletics.js",
        "kind": "function",
        "lineno": 219,
        "longname": "Athletics.getCertificateInfo",
        "memberof": "Athletics",
        "name": "getCertificateInfo",
        "params": [
            {
                "name": "log"
            },
            {
                "name": "athlete"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "undefined",
                        "Array.<number>"
                    ]
                }
            }
        ],
        "scope": "static",
        "summary": "Returns the min. score for the different certificates."
    },
    "Athletics.getInformation": {
        "filename": "athletics.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/competition_types/athletics.js",
        "kind": "function",
        "lineno": 209,
        "longname": "Athletics.getInformation",
        "memberof": "Athletics",
        "name": "getInformation",
        "params": [],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "scope": "static",
        "summary": "Returns information about the ct athletics."
    },
    "Athletics.getSports": {
        "filename": "athletics.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/competition_types/athletics.js",
        "kind": "function",
        "lineno": 14,
        "longname": "Athletics.getSports",
        "memberof": "Athletics",
        "name": "getSports",
        "params": [],
        "returns": [
            {}
        ],
        "scope": "static",
        "summary": "Returns a list of sport types associated with the ct athletics."
    },
    "Athletics.getValidData": {
        "filename": "athletics.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/competition_types/athletics.js",
        "kind": "function",
        "lineno": 83,
        "longname": "Athletics.getValidData",
        "memberof": "Athletics",
        "name": "getValidData",
        "params": [
            {
                "name": "log"
            },
            {
                "name": "athlete"
            },
            {
                "description": "<ul>\n<li>@param requireSignature</li>\n<li>@returns {object[]}</li>\n</ul>",
                "name": "accounts",
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                }
            }
        ],
        "scope": "static",
        "summary": "Validates the data of an athlete and adds more information to it. A copy of the data is returned. Without the write_private_hash the data is just decrypted without a write-permission check."
    },
    "Athletics.validate": {
        "filename": "athletics.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/competition_types/athletics.js",
        "kind": "function",
        "lineno": 116,
        "longname": "Athletics.validate",
        "memberof": "Athletics",
        "name": "validate",
        "params": [
            {
                "name": "log"
            },
            {
                "name": "athlete"
            },
            {
                "description": "<p>auth. codes</p>",
                "name": "accounts",
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                }
            },
            {
                "name": "requireSignature"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "scope": "static",
        "summary": "Returns whether an athlete is already finished."
    },
    "Data": {
        "filename": "data.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/data.js",
        "kind": "class",
        "lineno": 9,
        "longname": "Data",
        "name": "Data",
        "params": [],
        "scope": "global",
        "summary": "Creates an empty Data object. The information in the Data object are encrypted. To read/write you always need the group_private_hash."
    },
    "Data#findEncrypted": {
        "filename": "data.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/data.js",
        "kind": "function",
        "lineno": 61,
        "longname": "Data#findEncrypted",
        "memberof": "Data",
        "name": "findEncrypted",
        "params": [
            {
                "name": "log"
            },
            {
                "description": "<p>the sport type of the data</p>",
                "name": "stID"
            },
            {
                "description": "<p>auth. codes</p>",
                "name": "acs",
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                }
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                }
            }
        ],
        "scope": "instance",
        "summary": "Finds and returns the dataObject with the given stID."
    },
    "Data#getPlain": {
        "filename": "data.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/data.js",
        "kind": "function",
        "lineno": 24,
        "longname": "Data#getPlain",
        "memberof": "Data",
        "name": "getPlain",
        "params": [
            {
                "name": "log"
            },
            {
                "name": "accounts",
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                }
            },
            {
                "name": "requireSignature"
            },
            {
                "name": "groupID"
            }
        ],
        "returns": [
            {}
        ],
        "scope": "instance",
        "summary": "Returns the data in plain text."
    },
    "Data#update": {
        "filename": "data.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/data.js",
        "kind": "function",
        "lineno": 76,
        "longname": "Data#update",
        "memberof": "Data",
        "name": "update",
        "params": [
            {
                "name": "log"
            },
            {
                "description": "<p>the sport type of the data</p>",
                "name": "stID",
                "type": {
                    "names": [
                        "string"
                    ]
                }
            },
            {
                "description": "<p>the new data</p>",
                "name": "newMeasurements",
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                }
            },
            {
                "name": "groupAC"
            },
            {
                "name": "stationAC"
            }
        ],
        "scope": "instance",
        "summary": "Updates the data of a given stID."
    },
    "Log": {
        "filename": "log.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/log.js",
        "kind": "class",
        "lineno": 7,
        "longname": "Log",
        "name": "Log",
        "params": [],
        "scope": "global",
        "summary": "A logging object to save errors, warnings and other messages for the user."
    },
    "Log#clear": {
        "filename": "log.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/log.js",
        "kind": "function",
        "lineno": 79,
        "longname": "Log#clear",
        "memberof": "Log",
        "name": "clear",
        "params": [],
        "scope": "instance",
        "summary": "Clears the messages buffer"
    },
    "Log#custom": {
        "filename": "log.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/log.js",
        "kind": "function",
        "lineno": 60,
        "longname": "Log#custom",
        "memberof": "Log",
        "name": "custom",
        "params": [
            {
                "name": "level",
                "type": {
                    "names": [
                        "number"
                    ]
                }
            },
            {
                "name": "message",
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "scope": "instance",
        "summary": "Adds a new message with a custom level."
    },
    "Log#error": {
        "filename": "log.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/log.js",
        "kind": "function",
        "lineno": 17,
        "longname": "Log#error",
        "memberof": "Log",
        "name": "error",
        "params": [
            {
                "name": "message",
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "scope": "instance",
        "summary": "Adds a new error."
    },
    "Log#getAsString": {
        "filename": "log.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/log.js",
        "kind": "function",
        "lineno": 87,
        "longname": "Log#getAsString",
        "memberof": "Log",
        "name": "getAsString",
        "params": [],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "scope": "instance",
        "summary": "Returns all messages as strings."
    },
    "Log#getAsStringWithLevel": {
        "filename": "log.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/log.js",
        "kind": "function",
        "lineno": 98,
        "longname": "Log#getAsStringWithLevel",
        "memberof": "Log",
        "name": "getAsStringWithLevel",
        "params": [
            {
                "name": "level"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "scope": "instance",
        "summary": "Returns all messages with the given level as strings."
    },
    "Log#getAsStringWithMinLevel": {
        "filename": "log.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/log.js",
        "kind": "function",
        "lineno": 109,
        "longname": "Log#getAsStringWithMinLevel",
        "memberof": "Log",
        "name": "getAsStringWithMinLevel",
        "params": [
            {
                "name": "level"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "scope": "instance",
        "summary": "Returns all messages with the given or higher level as strings."
    },
    "Log#info": {
        "filename": "log.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/log.js",
        "kind": "function",
        "lineno": 47,
        "longname": "Log#info",
        "memberof": "Log",
        "name": "info",
        "params": [
            {
                "name": "message",
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "scope": "instance",
        "summary": "Adds a new info message."
    },
    "Log#merge": {
        "filename": "log.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/log.js",
        "kind": "function",
        "lineno": 72,
        "longname": "Log#merge",
        "memberof": "Log",
        "name": "merge",
        "params": [
            {
                "name": "other"
            }
        ],
        "scope": "instance",
        "summary": "Merge another Log objects messages to this.messages."
    },
    "Log#warning": {
        "filename": "log.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/log.js",
        "kind": "function",
        "lineno": 32,
        "longname": "Log#warning",
        "memberof": "Log",
        "name": "warning",
        "params": [
            {
                "name": "message",
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "scope": "instance",
        "summary": "Adds a new warning."
    },
    "Swimming.calculate": {
        "filename": "swimming.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/competition_types/swimming.js",
        "kind": "function",
        "lineno": 154,
        "longname": "Swimming.calculate",
        "memberof": "Swimming",
        "name": "calculate",
        "params": [
            {
                "name": "log"
            },
            {
                "name": "athlete"
            },
            {
                "name": "accounts",
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                }
            },
            {
                "name": "requireSignature"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "scope": "static",
        "summary": "Calculates the score archived by a athlete. In case of incomplete data, the function will calculate as much as possible."
    },
    "Swimming.canDoSportType": {
        "filename": "swimming.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/competition_types/swimming.js",
        "kind": "function",
        "lineno": 23,
        "longname": "Swimming.canDoSportType",
        "memberof": "Swimming",
        "name": "canDoSportType",
        "params": [
            {
                "name": "log"
            },
            {
                "name": "athlete"
            },
            {
                "name": "stID",
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                }
            }
        ],
        "scope": "static",
        "summary": "Returns whether a given athlete can do the sport type with the id stID."
    },
    "Swimming.getCertificateInfo": {
        "filename": "swimming.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/competition_types/swimming.js",
        "kind": "function",
        "lineno": 194,
        "longname": "Swimming.getCertificateInfo",
        "memberof": "Swimming",
        "name": "getCertificateInfo",
        "params": [
            {
                "name": "log"
            },
            {
                "name": "athlete"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "undefined",
                        "Array.<number>"
                    ]
                }
            }
        ],
        "scope": "static",
        "summary": "Returns the min. score for the different certificates."
    },
    "Swimming.getInformation": {
        "filename": "swimming.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/competition_types/swimming.js",
        "kind": "function",
        "lineno": 184,
        "longname": "Swimming.getInformation",
        "memberof": "Swimming",
        "name": "getInformation",
        "params": [],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "scope": "static",
        "summary": "Returns information about the ct swimming."
    },
    "Swimming.getSports": {
        "filename": "swimming.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/competition_types/swimming.js",
        "kind": "function",
        "lineno": 9,
        "longname": "Swimming.getSports",
        "memberof": "Swimming",
        "name": "getSports",
        "params": [],
        "returns": [
            {}
        ],
        "scope": "static",
        "summary": "Returns a list of sport types associated with the ct athletics."
    },
    "Swimming.getValidData": {
        "filename": "swimming.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/competition_types/swimming.js",
        "kind": "function",
        "lineno": 82,
        "longname": "Swimming.getValidData",
        "memberof": "Swimming",
        "name": "getValidData",
        "params": [
            {
                "name": "log"
            },
            {
                "name": "athlete"
            },
            {
                "description": "<ul>\n<li>@param requireSignature</li>\n<li>@returns {object[]}</li>\n</ul>",
                "name": "accounts",
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                }
            }
        ],
        "scope": "static",
        "summary": "Validates the data of an athlete and adds more information to it. A copy of the data is returned. Without the write_private_hash the data is just decrypted without a write-permission check."
    },
    "Swimming.validate": {
        "filename": "swimming.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/competition_types/swimming.js",
        "kind": "function",
        "lineno": 115,
        "longname": "Swimming.validate",
        "memberof": "Swimming",
        "name": "validate",
        "params": [
            {
                "name": "log"
            },
            {
                "name": "athlete"
            },
            {
                "name": "accounts",
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                }
            },
            {
                "name": "requireSignature"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "scope": "static",
        "summary": "Returns whether an athlete is already finished."
    },
    "decrypt": {
        "filename": "crypto.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/crypto/crypto.js",
        "kind": "function",
        "lineno": 36,
        "longname": "decrypt",
        "name": "decrypt",
        "params": [
            {
                "description": "<p>encrypted and signed data</p>",
                "name": "SED"
            },
            {
                "description": "<p>auth. code of the group</p>",
                "name": "groupAC"
            }
        ],
        "returns": [
            {
                "description": "<p>either the decrypted data or false if the signature verification failed</p>",
                "type": {
                    "names": [
                        "boolean",
                        "object"
                    ]
                }
            }
        ],
        "scope": "global",
        "summary": "Decrypt the signed data and check the signatures."
    },
    "encrypt": {
        "filename": "crypto.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/crypto/crypto.js",
        "kind": "function",
        "lineno": 77,
        "longname": "encrypt",
        "name": "encrypt",
        "params": [
            {
                "description": "<p>Data to encrypt</p>",
                "name": "data"
            },
            {
                "description": "<p>Group auth. code</p>",
                "name": "groupAC"
            },
            {
                "description": "<p>Station auth. code</p>",
                "name": "stationAC"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean",
                        "Object"
                    ]
                }
            }
        ],
        "scope": "global",
        "summary": "Encrypt data and sign it"
    },
    "filterUndefined": {
        "filename": "general.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/general.js",
        "kind": "function",
        "lineno": 6,
        "longname": "filterUndefined",
        "name": "filterUndefined",
        "params": [
            {
                "name": "data:",
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "scope": "global",
        "summary": "filters all undefined from an array."
    },
    "genRandomCode": {
        "filename": "pwdgen.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/crypto/pwdgen.js",
        "kind": "function",
        "lineno": 27,
        "longname": "genRandomCode",
        "name": "genRandomCode",
        "params": [],
        "returns": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                }
            }
        ],
        "scope": "global",
        "summary": "Generates a random login code."
    },
    "genRandomString": {
        "filename": "pwdgen.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/crypto/pwdgen.js",
        "kind": "function",
        "lineno": 14,
        "longname": "genRandomString",
        "name": "genRandomString",
        "params": [
            {
                "description": "<p>The length of the random string.</p>",
                "name": "length",
                "type": {
                    "names": [
                        "Number"
                    ]
                }
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                }
            }
        ],
        "scope": "global",
        "summary": "Generates a random string."
    },
    "generateAC": {
        "filename": "crypto.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/crypto/crypto.js",
        "kind": "function",
        "lineno": 58,
        "longname": "generateAC",
        "name": "generateAC",
        "params": [
            {
                "description": "<p>passwd to generate the auth. code from</p>",
                "name": "password"
            },
            {
                "description": "<p>[random] optional salt to recreate a auth. code</p>",
                "name": "salt"
            }
        ],
        "returns": [
            {
                "description": "<p>authentication code</p>",
                "type": {
                    "names": [
                        "Object"
                    ]
                }
            }
        ],
        "scope": "global",
        "summary": "Generates a authentication code for"
    },
    "getAcsFromAccounts": {
        "filename": "account.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/logic/account.js",
        "kind": "function",
        "lineno": 24,
        "longname": "getAcsFromAccounts",
        "name": "getAcsFromAccounts",
        "params": [
            {
                "name": "accounts",
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                }
            }
        ],
        "scope": "global",
        "summary": "Return the ACs from all passed accounts"
    },
    "tryDecrypt": {
        "filename": "crypto.js",
        "filepath": "https://github.com/TheMegaTB/BJS/blob/master/meteor/imports/api/crypto/crypto.js",
        "kind": "function",
        "lineno": 93,
        "longname": "tryDecrypt",
        "name": "tryDecrypt",
        "params": [
            {
                "description": "<p>Logger instance to use</p>",
                "name": "log"
            },
            {
                "description": "<p>signed and encrypted data object</p>",
                "name": "SED"
            },
            {
                "description": "<p>array of authentication codes</p>",
                "name": "acs"
            }
        ],
        "returns": [
            {
                "description": "<p>Object containing the data and the signatureEnforced property (whether or not the data has been checked against the station's AC) or false in case something went wrong or decryption/signature checking isn't possible or unsuccessful</p>",
                "type": {
                    "names": [
                        "*",
                        "boolean"
                    ]
                }
            }
        ],
        "scope": "global",
        "summary": "Attempts to decrypt a given SED (signed and encrypted data) with the given ACs"
    }
};